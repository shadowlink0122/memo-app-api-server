openapi: 3.0.3
info:
  title: Memo App API Server
  description: |
    Go + Ginを使用したメモアプリケーションのREST APIサーバーです。

    ## 認証について

    メモAPI（`/api/memos/*`）のエンドポイントには認証が必要です。
    現在は空実装ですが、将来的にJWT認証を実装予定です。

    ## 機能

    - メモのCRUD操作
    - カテゴリとタグによる分類
    - 優先度設定（low/medium/high）
    - ステータス管理（active/archived）
    - 段階的削除システム（誤削除防止）
    - 全文検索機能
    - ページネーション対応

    ## 削除システム

    メモの削除は2段階で行われます：

    1. **第1段階削除** (`DELETE /api/memos/{id}`)
       - アクティブメモ → アーカイブに移動
       - アーカイブメモ → 完全削除

    2. **完全削除** (`DELETE /api/memos/{id}/permanent`)
       - 即座に完全削除（取り消し不可）

    3. **復元** (`PATCH /api/memos/{id}/restore`)
       - アーカイブメモ → アクティブに復元

  version: 2.0.0
  contact:
    name: Memo App API
    url: https://github.com/shadowlink0122/memo-app-api-server
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000
    description: 開発環境サーバー
  - url: https://your-domain.com
    description: 本番環境サーバー

tags:
  - name: Health
    description: システム状態確認用API
  - name: Hello
    description: 基本的なGreeting API
  - name: Auth
    description: ユーザー認証API
  - name: User
    description: ユーザー管理API（認証必要）
  - name: Memo
    description: メモ管理API（認証必要）
  - name: Protected
    description: 認証テスト用API

paths:
  # パブリックAPI
  /:
    get:
      tags:
        - Hello
      summary: Hello World (JSON)
      description: JSON形式でHello Worldメッセージを返します
      responses:
        "200":
          description: 成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HelloResponse"
        "405":
          description: メソッドが許可されていません
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      tags:
        - Hello
      summary: メソッド不許可テスト
      description: POSTメソッドは許可されていません（405エラー）
      responses:
        "405":
          description: メソッドが許可されていません
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - Hello
      summary: メソッド不許可テスト
      description: PUTメソッドは許可されていません（405エラー）
      responses:
        "405":
          description: メソッドが許可されていません
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - Hello
      summary: メソッド不許可テスト
      description: DELETEメソッドは許可されていません（405エラー）
      responses:
        "405":
          description: メソッドが許可されていません
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    patch:
      tags:
        - Hello
      summary: メソッド不許可テスト
      description: PATCHメソッドは許可されていません（405エラー）
      responses:
        "405":
          description: メソッドが許可されていません
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /health:
    get:
      tags:
        - Health
      summary: ヘルスチェック
      description: アプリケーションの状態を確認します
      responses:
        "200":
          description: サービスが正常に動作しています
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthResponse"

  /hello:
    get:
      tags:
        - Hello
      summary: Hello World (Text)
      description: テキスト形式でHello Worldメッセージを返します
      responses:
        "200":
          description: 成功
          content:
            text/plain:
              schema:
                type: string
                example: "Hello World!"

  # 認証API
  /api/auth/register:
    post:
      tags:
        - Auth
      summary: ローカル認証新規登録
      description: ID/パスワードによる新規ユーザー登録
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: 登録成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: ユーザー名またはメールアドレスが既に存在
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "429":
          description: 同一IPからの登録制限に達しました
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/auth/login:
    post:
      tags:
        - Auth
      summary: ローカル認証ログイン
      description: メールアドレスとパスワードによるログイン
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: ログイン成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: 認証情報が正しくありません
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: アカウントが無効化されています
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/auth/github/url:
    get:
      tags:
        - Auth
      summary: GitHub認証URL取得
      description: GitHub OAuth認証のためのURLを取得
      responses:
        "200":
          description: 認証URL取得成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GitHubAuthURLResponse"
        "500":
          description: サーバーエラー
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/auth/github/callback:
    get:
      tags:
        - Auth
      summary: GitHub認証コールバック
      description: GitHubからのOAuth認証コールバックを処理
      parameters:
        - name: code
          in: query
          description: GitHubから返される認証コード
          required: true
          schema:
            type: string
        - name: state
          in: query
          description: CSRF防止用のstate値
          required: true
          schema:
            type: string
      responses:
        "200":
          description: GitHub認証成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          description: 不正なリクエストパラメータ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: メールアドレスが他の認証方法で既に登録済み
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "429":
          description: 同一IPからの登録制限に達しました
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: GitHub認証処理エラー
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/auth/refresh:
    post:
      tags:
        - Auth
      summary: トークンリフレッシュ
      description: リフレッシュトークンを使用してアクセストークンを更新
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenRequest"
      responses:
        "200":
          description: トークンリフレッシュ成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: 無効なリフレッシュトークン
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: サーバーエラー
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/profile:
    get:
      tags:
        - User
      summary: ユーザープロフィール取得
      description: 現在ログイン中のユーザーのプロフィール情報を取得
      security:
        - bearerAuth: []
      responses:
        "200":
          description: プロフィール取得成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfileResponse"
        "401":
          description: 認証が必要です
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: サーバーエラー
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # 認証テスト用API
  /api/protected:
    get:
      tags:
        - Protected
      summary: 認証テスト
      description: 認証が必要なエンドポイント（デモ用）
      security:
        - bearerAuth: []
      responses:
        "200":
          description: 認証成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProtectedResponse"
        "401":
          description: 認証が必要です
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # メモAPI
  /api/memos:
    get:
      tags:
        - Memo
      summary: メモ一覧取得
      description: |
        メモの一覧を取得します。フィルタリング、検索、ページネーションに対応しています。
      security:
        - bearerAuth: []
      parameters:
        - name: category
          in: query
          description: カテゴリでフィルタ
          required: false
          schema:
            type: string
            maxLength: 50
        - name: status
          in: query
          description: ステータスでフィルタ
          required: false
          schema:
            type: string
            enum: [active, archived]
        - name: priority
          in: query
          description: 優先度でフィルタ
          required: false
          schema:
            type: string
            enum: [low, medium, high]
        - name: search
          in: query
          description: 全文検索キーワード
          required: false
          schema:
            type: string
        - name: tags
          in: query
          description: タグでフィルタ（カンマ区切り）
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: ページ番号
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: 1ページあたりの件数
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        "200":
          description: メモ一覧取得成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MemoListResponse"
        "400":
          description: 不正なリクエストパラメータ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: 認証が必要です
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    post:
      tags:
        - Memo
      summary: メモ作成
      description: 新しいメモを作成します
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMemoRequest"
      responses:
        "201":
          description: メモ作成成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MemoResponse"
        "400":
          description: 不正なリクエストボディ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: 認証が必要です
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/memos/{id}:
    get:
      tags:
        - Memo
      summary: メモ詳細取得
      description: 指定されたIDのメモの詳細を取得します
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: メモID
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        "200":
          description: メモ詳細取得成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MemoResponse"
        "404":
          description: メモが見つかりません
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: 認証が必要です
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      tags:
        - Memo
      summary: メモ更新
      description: 指定されたIDのメモを更新します
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: メモID
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMemoRequest"
      responses:
        "200":
          description: メモ更新成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MemoResponse"
        "400":
          description: 不正なリクエストボディ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: メモが見つかりません
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: 認証が必要です
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - Memo
      summary: メモ段階的削除
      description: |
        指定されたIDのメモを段階的に削除します。

        **削除動作:**
        - **アクティブメモ**: アーカイブに移動（復元可能）
        - **アーカイブ済みメモ**: 完全削除（復元不可）

        この仕組みにより、誤削除を防止できます。
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: メモID
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        "204":
          description: メモ削除成功（アーカイブまたは完全削除）
        "404":
          description: メモが見つかりません
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: 認証が必要です
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/memos/{id}/permanent:
    delete:
      tags:
        - Memo
      summary: メモ完全削除
      description: |
        指定されたIDのメモを完全削除します。

        **注意:** この操作は取り消せません。データは完全に失われます。

        **使用場面:**
        - アーカイブ済みメモの最終削除
        - 機密データの確実な削除
        - データベースのクリーンアップ
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: メモID
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        "204":
          description: メモ完全削除成功
        "404":
          description: メモが見つかりません
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: 認証が必要です
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/memos/{id}/archive:
    patch:
      tags:
        - Memo
      summary: メモアーカイブ
      description: 指定されたIDのメモをアーカイブします
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: メモID
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        "200":
          description: メモアーカイブ成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MemoResponse"
        "404":
          description: メモが見つかりません
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: 認証が必要です
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/memos/{id}/restore:
    patch:
      tags:
        - Memo
      summary: メモ復元
      description: アーカイブされたメモを復元します
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: メモID
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        "200":
          description: メモ復元成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MemoResponse"
        "404":
          description: メモが見つかりません
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: 認証が必要です
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/memos/search:
    get:
      tags:
        - Memo
      summary: メモ検索
      description: |
        メモを検索します。タイトルとコンテンツの全文検索が可能です。
      security:
        - bearerAuth: []
      parameters:
        - name: q
          in: query
          description: 検索キーワード
          required: true
          schema:
            type: string
            minLength: 1
        - name: page
          in: query
          description: ページ番号
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: 1ページあたりの件数
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        "200":
          description: 検索結果
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MemoListResponse"
        "400":
          description: 不正な検索パラメータ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: 認証が必要です
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT Bearer トークンによる認証。
        現在は空実装ですが、将来的に実装予定です。

  schemas:
    # 基本レスポンス
    HelloResponse:
      type: object
      properties:
        message:
          type: string
          example: "Hello World"
        version:
          type: string
          example: "2.0"
        service:
          type: string
          example: "memo-app-api-server"
      required:
        - message
        - version
        - service

    HealthResponse:
      type: object
      properties:
        status:
          type: string
          example: "OK"
        timestamp:
          type: string
          format: date-time
          example: "2025-07-22T10:30:00+09:00"
        uptime:
          type: string
          example: "running"
      required:
        - status
        - timestamp
        - uptime

    # 認証関連スキーマ
    RegisterRequest:
      type: object
      properties:
        username:
          type: string
          description: ユーザー名（3-30文字、英数字とアンダースコアのみ）
          pattern: "^[a-zA-Z0-9_]{3,30}$"
          example: "john_doe"
        email:
          type: string
          format: email
          description: メールアドレス
          example: "john@example.com"
        password:
          type: string
          description: パスワード（8文字以上、大小文字・数字・記号を含む）
          minLength: 8
          example: "SecurePass123!"
      required:
        - username
        - email
        - password

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: メールアドレス
          example: "john@example.com"
        password:
          type: string
          description: パスワード
          example: "SecurePass123!"
      required:
        - email
        - password

    RefreshTokenRequest:
      type: object
      properties:
        refresh_token:
          type: string
          description: リフレッシュトークン
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      required:
        - refresh_token

    AuthResponse:
      type: object
      properties:
        message:
          type: string
          example: "Login successful"
        data:
          type: object
          properties:
            user:
              $ref: "#/components/schemas/PublicUser"
            access_token:
              type: string
              description: JWTアクセストークン
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            refresh_token:
              type: string
              description: JWTリフレッシュトークン
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            expires_in:
              type: integer
              description: アクセストークンの有効期限（秒）
              example: 86400
          required:
            - user
            - access_token
            - refresh_token
            - expires_in
      required:
        - message
        - data

    GitHubAuthURLResponse:
      type: object
      properties:
        auth_url:
          type: string
          description: GitHub認証URL
          example: "https://github.com/login/oauth/authorize?client_id=...&state=..."
        state:
          type: string
          description: CSRF防止用のstate値
          example: "random-state-string"
      required:
        - auth_url
        - state

    PublicUser:
      type: object
      properties:
        id:
          type: integer
          description: ユーザーID
          example: 1
        username:
          type: string
          description: ユーザー名
          example: "john_doe"
        email:
          type: string
          format: email
          description: メールアドレス
          example: "john@example.com"
        github_username:
          type: string
          nullable: true
          description: GitHubユーザー名
          example: "johndoe"
        avatar_url:
          type: string
          nullable: true
          description: アバター画像URL
          example: "https://avatars.githubusercontent.com/u/123456?v=4"
        is_active:
          type: boolean
          description: アカウントの有効性
          example: true
        created_at:
          type: string
          format: date-time
          description: アカウント作成日時
          example: "2025-07-22T10:00:00+09:00"
        updated_at:
          type: string
          format: date-time
          description: 最終更新日時
          example: "2025-07-22T10:00:00+09:00"
      required:
        - id
        - username
        - email
        - is_active
        - created_at
        - updated_at

    UserProfileResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/PublicUser"
      required:
        - data

    ProtectedResponse:
      type: object
      properties:
        message:
          type: string
          example: "これは認証が必要なエンドポイントです"
        user:
          type: string
          example: "認証されたユーザー"
        timestamp:
          type: string
          format: date-time
          example: "2025-07-22T10:30:00+09:00"
      required:
        - message
        - user
        - timestamp

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: エラーの種類
          example: "Invalid request format"
        message:
          type: string
          description: 詳細なエラーメッセージ
          example: "Field validation failed"
      required:
        - error

    # メモ関連スキーマ
    CreateMemoRequest:
      type: object
      properties:
        title:
          type: string
          description: メモのタイトル
          maxLength: 200
          example: "重要なタスク"
        content:
          type: string
          description: メモの内容
          example: "明日までにプレゼン資料を作成する"
        category:
          type: string
          description: カテゴリ
          maxLength: 50
          example: "仕事"
        tags:
          type: array
          description: タグのリスト
          items:
            type: string
          example: ["プレゼン", "重要"]
        priority:
          type: string
          description: 優先度
          enum: [low, medium, high]
          example: "high"
      required:
        - title
        - content

    UpdateMemoRequest:
      type: object
      properties:
        title:
          type: string
          description: メモのタイトル
          maxLength: 200
          example: "更新されたタスク"
        content:
          type: string
          description: メモの内容
          example: "更新されたメモの内容"
        category:
          type: string
          description: カテゴリ
          maxLength: 50
          example: "プライベート"
        tags:
          type: array
          description: タグのリスト
          items:
            type: string
          example: ["更新", "完了"]
        priority:
          type: string
          description: 優先度
          enum: [low, medium, high]
          example: "medium"
        status:
          type: string
          description: ステータス
          enum: [active, archived]
          example: "active"

    MemoResponse:
      type: object
      properties:
        id:
          type: integer
          description: メモID
          example: 1
        title:
          type: string
          description: メモのタイトル
          example: "重要なタスク"
        content:
          type: string
          description: メモの内容
          example: "明日までにプレゼン資料を作成する"
        category:
          type: string
          description: カテゴリ
          example: "仕事"
        tags:
          type: array
          description: タグのリスト
          items:
            type: string
          example: ["プレゼン", "重要"]
        priority:
          type: string
          description: 優先度
          enum: [low, medium, high]
          example: "high"
        status:
          type: string
          description: ステータス
          enum: [active, archived]
          example: "active"
        created_at:
          type: string
          format: date-time
          description: 作成日時
          example: "2025-07-22T10:00:00+09:00"
        updated_at:
          type: string
          format: date-time
          description: 更新日時
          example: "2025-07-22T10:00:00+09:00"
        completed_at:
          type: string
          format: date-time
          description: 完了日時（nullの場合あり）
          nullable: true
          example: null
      required:
        - id
        - title
        - content
        - category
        - tags
        - priority
        - status
        - created_at
        - updated_at

    MemoListResponse:
      type: object
      properties:
        memos:
          type: array
          description: メモのリスト
          items:
            $ref: "#/components/schemas/MemoResponse"
        total:
          type: integer
          description: 総件数
          example: 25
        page:
          type: integer
          description: 現在のページ番号
          example: 1
        limit:
          type: integer
          description: 1ページあたりの件数
          example: 10
        total_pages:
          type: integer
          description: 総ページ数
          example: 3
      required:
        - memos
        - total
        - page
        - limit
        - total_pages
